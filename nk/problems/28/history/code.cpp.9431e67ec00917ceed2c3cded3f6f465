class Solution {
public:
    string minWindow(string S, string T) {
        std::unordered_map<char, int> target;
        std::unordered_map<char, int> curr;
        for (auto c : T) {
            target[c]++;
        }
        int count = 0;
        int left = 0, right = 0;
        int left_min = 0, right_min = INT_MAX;
        while (right < S.size()) {
            if (target.count(S[right]) != 0) {
                curr[S[right]]++;
                if (curr[S[right]] == target[S[right]]) {
                    count++;
                    if (count == target.size()) {
                        while (left <= right) {
                            if (target.count(S[left]) != 0) {
                                curr[S[left]]--;
                                if (curr[S[left]] < target[S[left]]) {
                                    count--;
                                    if (right_min - left_min > right - left) {
                                        left_min = left;
                                        right_min = right;
                                    }
                                    ++left;
                                    break;
                                }
                            }
                            ++left;
                        }
                    }
                }
            }
            ++right;
        }
        if (right_min - left_min + 1 > S.size()) {
            return "";
        }
        return S.substr(left_min, right_min - left_min + 1);
    }
};
